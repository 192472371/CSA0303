#include <stdio.h>
#include <ctype.h>  // For isalnum()
#define SIZE 50
char stack[SIZE];
int top = -1;
void push(char c) {
    if (top == SIZE - 1) {
        printf("Stack Overflow\n");
    } else {
        stack[++top] = c;
    }
}
char pop() {
    if (top == -1) {
        return -1; // Indicates empty
    } else {
        return stack[top--];
    }
}
int precedence(char op) {
    if (op == '^') return 3;
    if (op == '*' || op == '/') return 2;
    if (op == '+' || op == '-') return 1;
    return 0;
}
int main() {
    char infix[SIZE], postfix[SIZE], ch;
    int i = 0, k = 0;
    printf("Enter infix expression: ");
    scanf("%s", infix);
    while ((ch = infix[i++]) != '\0') {
        if (isalnum(ch)) { // Operand â†’ directly to output
            postfix[k++] = ch;
        }
        else if (ch == '(') {
            push(ch);
        }
        else if (ch == ')') {
            while (top != -1 && stack[top] != '(') {
                postfix[k++] = pop();
            }
            pop(); // Remove '(' from stack
        }
        else { // Operator
            while (top != -1 && precedence(stack[top]) >= precedence(ch)) {
                postfix[k++] = pop();
            }
            push(ch);
        }
    }
    while (top != -1) {
        postfix[k++] = pop();
    }
    postfix[k] = '\0';
    printf("Postfix expression: %s\n", postfix);
    return 0;
}
