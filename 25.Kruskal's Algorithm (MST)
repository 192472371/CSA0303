#include <stdio.h>
#define MAX 30

int parent[MAX];

int find(int i) {
    while (parent[i] != i) i = parent[i];
    return i;
}

void union_set(int i, int j) {
    int a = find(i);
    int b = find(j);
    parent[a] = b;
}

void kruskal(int n, int cost[MAX][MAX]) {
    int mincost = 0, edges = 0;
    for (int i = 0; i < n; i++) parent[i] = i;

    while (edges < n - 1) {
        int min = 9999, a = -1, b = -1;
        for (int i = 0; i < n; i++)
            for (int j = 0; j < n; j++)
                if (find(i) != find(j) && cost[i][j] < min) {
                    min = cost[i][j];
                    a = i;
                    b = j;
                }
        union_set(a, b);
        printf("Edge %d: %d - %d cost: %d\n", edges++, a, b, min);
        mincost += min;
    }
    printf("Minimum cost = %d\n", mincost);
}

int main() {
    int n, cost[MAX][MAX];
    printf("Enter number of vertices: ");
    scanf("%d", &n);
    printf("Enter cost adjacency matrix:\n");
    for (int i = 0; i < n; i++)
        for (int j = 0; j < n; j++)
            scanf("%d", &cost[i][j]);
    kruskal(n, cost);
    return 0;
}
